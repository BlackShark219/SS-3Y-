.686
.model flat, stdcall
option casemap: none
.data
 X1 dd 230 ,140 ,5312 ,321 ,3213 ,315 ,5353 ,854
 LENX1 EQU $ -X1; визначення довжини Х1 (в байтах)
 Y1 db LENX1 DUP(0FFh);занесення одиниць до пам'ятті-приймача
 Y2 dd 8 DUP(0AAAAAAAAh);занесення одиниць до пам'ятті-приймача
.code
start:
 xor ecx, ecx
 xor ebx, ebx
 mov cl, LENX1;завантаження кількості чисел в регистр-лічильник
 mov esi,0
 mov eax,0
DOLOOP:
 mov eax,[X1+si];завантаження в регістр числа (32 біт) із масиву X1
 mov ah,0;завантаження в регістр 0(8 біт)
 not al;інвертування коду в регістрі (8 біт)
 bsr bx,ax;зворотнє сканування на наявність 1(16 біт)
 mov [Y1+si],bl;завантаження в масив У1 числа (8 біт) з регістру
 inc si;інкрементація лічильника
 loop DOLOOP;зменшення (-1) лічильника і повторення при ECX/=0
 xor ecx, ecx
 xor esi, esi
 xor eax, eax
DOLOOP2:
 cmp si, 32;порівняння лічильника si 
 JE EXIT;умовний перехід
 cmp [Y1+si],6;порівняння елемента масиву 
 JE ADDY2;умовний перехід
 mov ecx,[X1+si];завантаження в регістр числа (32 біт) із масиву X1 
 mov [Y2+si],ecx;завантаження в масив У2 числа (32 біт) з регістру 
 inc si;інкрементація лічильника
 loop DOLOOP2;зменшення (-1) лічильника і повторення при ECX/=0
ADDY2:
 mov eax,[X1+si];завантаження в регістр числа (32 біт) із масиву X1
 not eax;інвертування коду в регістрі (32 біт)
 mov [Y2+si],eax;завантаження в масив У2 числа (32 біт) з регістру 
 inc si;інкрементація лічильника
 jmp DOLOOP2;перехід до лейблу
EXIT:
 mov [Y2+32], 0;заповнення нулями 
ret
end start
 